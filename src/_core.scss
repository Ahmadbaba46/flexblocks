@mixin define-flexblocks($p, $spaces) {
  // CORE
  // Always use this
  .#{$p}-col, .#{$p}-row, .#{$p}-cols, .#{$p}-rows {
    display: flex;
    margin: 0;
    flex-direction: column;
    justify-content: space-between;
    align-items: stretch;
    position: relative;
  }

  // TYPES
  // Always use exactly one of these
  .#{$p}-col {
    flex-direction: column;
  }
  .#{$p}-row {
    flex-direction: row;
  }
  .#{$p}-cols {
    flex-direction: column;
    flex-wrap: wrap;
  }
  .#{$p}-rows {
    flex-direction: row;
    flex-wrap: wrap;
  }

  // ALIGNMENT
  // Use at most one vertical and one horizontal
  .#{$p}-col.#{$p}-top,
  .#{$p}-cols.#{$p}-top,
  .#{$p}-row.#{$p}-left,
  .#{$p}-rows.#{$p}-left {
    justify-content: flex-start;
  }

  .#{$p}-col.#{$p}-bottom,
  .#{$p}-cols.#{$p}-bottom,
  .#{$p}-row.#{$p}-right,
  .#{$p}-rows.#{$p}-right {
    justify-content: flex-end;
  }

  .#{$p}-col.#{$p}-middle,
  .#{$p}-cols.#{$p}-middle,
  .#{$p}-row.#{$p}-center,
  .#{$p}-rows.#{$p}-center {
    justify-content: center;
  }

  // This overrides the children values, so don't use if you want
  // to specify specific values for the children.
  .#{$p}-col.#{$p}-vstretch>*,
  .#{$p}-cols.#{$p}-vstretch>*,
  .#{$p}-row.#{$p}-stretch>*,
  .#{$p}-rows.#{$p}-stretch>* {
    flex: 1 0 auto;
  }

  .#{$p}-col.#{$p}-vjustify,
  .#{$p}-cols.#{$p}-vjustify,
  .#{$p}-row.#{$p}-justify,
  .#{$p}-rows.#{$p}-justify {
    justify-content: space-between;
  }

  .#{$p}-col.#{$p}-left,
  .#{$p}-row.#{$p}-top {
    align-items: flex-start;
  }

  .#{$p}-col.#{$p}-right,
  .#{$p}-row.#{$p}-bottom {
    align-items: flex-end;
  }

  .#{$p}-col.#{$p}-center,
  .#{$p}-row.#{$p}-middle {
    align-items: center;
  }

  // spread and stretch do the same in the cross-axis
  // for non grid elements. also in grids, children are always
  // stretched
  .#{$p}-col.#{$p}-stretch,
  .#{$p}-row.#{$p}-vstretch,
  .#{$p}-col.#{$p}-justify,
  .#{$p}-row.#{$p}-vjustify,
  .#{$p}-cols,
  .#{$p}-rows {
    align-items: stretch;
  }

  .#{$p}-cols.#{$p}-left,
  .#{$p}-rows.#{$p}-top {
    align-content: flex-start;
  }

  .#{$p}-cols.#{$p}-right,
  .#{$p}-rows.#{$p}-bottom {
    align-content: flex-end;
  }

  .#{$p}-cols.#{$p}-center,
  .#{$p}-rows.#{$p}-middle {
    align-content: center;
  }

  .#{$p}-cols.#{$p}-justify,
  .#{$p}-rows.#{$p}-vjustify {
    align-content: space-between;
  }

  .#{$p}-cols.#{$p}-stretch,
  .#{$p}-rows.#{$p}-vstretch {
    align-content: stretch;
  }

  // MARGIN PROPERTIES
  // spaces children a certain amount away from each other
  // TODO does not currently work with .#{$p}-rows or .#{$p}-cols
  @for $i from 1 through length($spaces) {
    $space: nth($spaces, $i);
    .#{$p}-vmargin-#{$i} > * {
      margin-top: $space;
    }
    .#{$p}-margin-#{$i} > * {
      margin-left: $space;
    }
  }

  .#{$p}-row>*:first-child, .#{$p}-col>*:first-child {
    margin-top: 0;
    margin-left: 0;
  }

  // CHILD PROPERTIES
  // fill makes flexbox ignore the content size of this el and just be that portion of
  // the remaining space
  @for $i from 1 through 6 {
    .#{$p}-fill-#{$i} { flex: $i 0 0; }
  }
  .#{$p}-fill { @extend .#{$p}-fill-1; }

  // stretch makes flexbox fill everything out normally, and then stretch
  // these elements proportionally to fill the remaining space. This means two
  // stretch-1s could have different widths. You probably want fill instead
  @for $i from 1 through 6 {
    .#{$p}-stretch-#{$i} { flex: $i 0 auto; }
  }
  .#{$p}-stretch { @extend .#{$p}-stretch-1; }

  // SPECIAL
  .#{$p}-page {
    min-height: 100vh;
  }

  .#{$p}-popover {
    position: absolute;
    top: 100%;
    left: 50%;
  }

  .#{$p}-popover>* {
    position: relative;
    left: -50%;
  }
}
