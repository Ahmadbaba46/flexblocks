@mixin define-flexblocks($p, $spaces) {
  // CORE
  // Always use this
  .#{$p}col, .#{$p}row {
    display: flex;
    flex-direction: column;
    justify-content: space-between;
    align-items: stretch;
    position: relative;
  }

  // override space commands on different viewsizes
  .#{$p}col>* {
    margin-left: 0;
  }

  .#{$p}row>* {
    margin-top: 0;
  }

  // TYPES
  // Always use exactly one of these
  .#{$p}col {
    flex-direction: column;
  }
  .#{$p}row {
    flex-direction: row;
  }
  // ALIGNMENT
  // Use at most one vertical and one horizontal
  .#{$p}col.#{$p}top,
  .#{$p}row.#{$p}left {
    justify-content: flex-start;
  }

  .#{$p}col.#{$p}bottom,
  .#{$p}row.#{$p}right {
    justify-content: flex-end;
  }

  .#{$p}col.#{$p}middle,
  .#{$p}row.#{$p}center {
    justify-content: center;
  }

  // This overrides the children values, so don't use if you want
  // to specify specific values for the children.
  .#{$p}col.#{$p}vstretch>*,
  .#{$p}row.#{$p}stretch>* {
    flex: 1 0 auto;
  }

  .#{$p}col.#{$p}vjustify,
  .#{$p}row.#{$p}justify {
    justify-content: space-between;
  }

  .#{$p}col.#{$p}left,
  .#{$p}row.#{$p}top {
    align-items: flex-start;
  }

  .#{$p}col.#{$p}right,
  .#{$p}row.#{$p}bottom {
    align-items: flex-end;
  }

  .#{$p}col.#{$p}center,
  .#{$p}row.#{$p}middle {
    align-items: center;
  }

  // spread and stretch do the same in the cross-axis
  // for non grid elements. also in grids, children are always
  // stretched
  .#{$p}col.#{$p}stretch,
  .#{$p}row.#{$p}vstretch,
  .#{$p}col.#{$p}justify,
  .#{$p}row.#{$p}vjustify {
    align-items: stretch;
  }

  // MARGIN PROPERTIES
  // spaces children a certain amount away from each other
  @for $i from 1 through length($spaces) {
    $space: nth($spaces, $i);
    .#{$p}vspace-#{$i} > * {
      margin-top: $space;
    }
    .#{$p}space-#{$i} > * {
      margin-left: $space;
    }
  }

  .#{$p}row>*:first-child, .#{$p}col>*:first-child {
    margin-top: 0;
    margin-left: 0;
  }

  // CHILD PROPERTIES
  // fill makes flexbox ignore the content size of this el and just be that portion of
  // the remaining space
  @for $i from 1 through 6 {
    .#{$p}fill-#{$i} { flex: $i 0 0; }
  }
  .#{$p}fill { @extend .#{$p}fill-1; }

  // stretch makes flexbox fill everything out normally, and then stretch
  // these elements proportionally to fill the remaining space. This means two
  // stretch-1s could have different widths. You probably want fill instead
  @for $i from 1 through 6 {
    .#{$p}stretch-#{$i} { flex: $i 0 auto; }
  }
  .#{$p}stretch { @extend .#{$p}stretch-1; }

  // POP classes for popovers
  .#{$p}pop-top, .#{$p}pop-bottom {
    position: absolute;
    left: 50%;
    transform: translate(-50%, 0);
  }
  .#{$p}pop-bottom { top: 100%; }
  .#{$p}pop-top { bottom: 100%; }

  .#{$p}pop-left, .#{$p}pop-right {
    position: absolute;
    top: 50%;
    transform: translate(0, -50%);
  }
  .#{$p}pop-left { right: 100%; }
  .#{$p}pop-right { left: 100%; }

  // SPECIAL
  .#{$p}page {
    min-height: 100vh;
  }

  .#{$p}cover {
    position: absolute;
    top: 0;
    bottom: 0;
    left: 0;
    right: 0;
  }
}
